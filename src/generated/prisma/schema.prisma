// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

enum NotificationType {
  ORDER_ASSIGNED
  ORDER_STATUS_CHANGED
  ZONE_BOUNDARY_ALERT
  PAYMENT_RECEIVED
  PAYMENT_FAILED
  DELIVERY_DELAYED
  DELIVERY_COMPLETED
  SYSTEM_ALERT
}

enum NotificationChannel {
  EMAIL
  SMS
  PUSH
}

enum NotificationFrequency {
  IMMEDIATE
  DAILY
  WEEKLY
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  notifications           Notification[]
  notificationPreferences NotificationPreference[]

  @@map("users")
}

model Courier {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  notifications           Notification[]
  notificationPreferences NotificationPreference[]

  @@map("couriers")
}

model Order {
  id        String   @id @default(cuid())
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  notifications Notification[]

  @@map("orders")
}

model Zone {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  notifications Notification[]

  @@map("zones")
}

model NotificationPreference {
  id        String                @id @default(cuid())
  userId    String?
  courierId String?
  type      NotificationType
  channel   NotificationChannel
  frequency NotificationFrequency
  enabled   Boolean               @default(true)
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt

  user    User?    @relation(fields: [userId], references: [id])
  courier Courier? @relation(fields: [courierId], references: [id])

  @@unique([userId, type, channel])
  @@unique([courierId, type, channel])
  @@map("notification_preferences")
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  data      Json?
  read      Boolean          @default(false)
  userId    String?
  courierId String?
  orderId   String?
  zoneId    String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user    User?    @relation(fields: [userId], references: [id])
  courier Courier? @relation(fields: [courierId], references: [id])
  order   Order?   @relation(fields: [orderId], references: [id])
  zone    Zone?    @relation(fields: [zoneId], references: [id])

  @@map("notifications")
}
