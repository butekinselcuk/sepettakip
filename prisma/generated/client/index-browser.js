
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  department: 'department',
  level: 'level',
  permissions: 'permissions',
  title: 'title',
  phone: 'phone',
  profileImage: 'profileImage',
  lastLogin: 'lastLogin',
  loginAttempts: 'loginAttempts',
  isSuperAdmin: 'isSuperAdmin',
  ipRestrictions: 'ipRestrictions'
};

exports.Prisma.CourierScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  status: 'status',
  vehicleType: 'vehicleType',
  phone: 'phone',
  zoneId: 'zoneId',
  ratings: 'ratings',
  currentLatitude: 'currentLatitude',
  currentLongitude: 'currentLongitude',
  lastLocationUpdate: 'lastLocationUpdate',
  availableFrom: 'availableFrom',
  availableTo: 'availableTo',
  documentsVerified: 'documentsVerified',
  backgroundChecked: 'backgroundChecked',
  maxDeliveriesPerDay: 'maxDeliveriesPerDay',
  maxDistance: 'maxDistance',
  averageSpeed: 'averageSpeed',
  courierFee: 'courierFee',
  lastSeen: 'lastSeen',
  availabilityStatus: 'availabilityStatus'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  status: 'status',
  totalPrice: 'totalPrice',
  items: 'items',
  address: 'address',
  notes: 'notes',
  estimatedDelivery: 'estimatedDelivery',
  actualDelivery: 'actualDelivery',
  latitude: 'latitude',
  longitude: 'longitude',
  customerId: 'customerId',
  businessId: 'businessId',
  courierId: 'courierId',
  priority: 'priority',
  timeWindowId: 'timeWindowId',
  estimatedDuration: 'estimatedDuration',
  estimatedDistance: 'estimatedDistance',
  sequenceNumber: 'sequenceNumber',
  refundStatus: 'refundStatus',
  cancellationStatus: 'cancellationStatus'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  phone: 'phone',
  address: 'address',
  latitude: 'latitude',
  longitude: 'longitude',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BusinessScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  description: 'description',
  address: 'address',
  phone: 'phone',
  website: 'website',
  email: 'email',
  logoUrl: 'logoUrl',
  coverUrl: 'coverUrl',
  latitude: 'latitude',
  longitude: 'longitude',
  zoneId: 'zoneId',
  status: 'status',
  rating: 'rating',
  tax_id: 'tax_id',
  bank_iban: 'bank_iban',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  openingTime: 'openingTime',
  closingTime: 'closingTime',
  deliveryRadius: 'deliveryRadius',
  deliveryFee: 'deliveryFee',
  facebook: 'facebook',
  instagram: 'instagram',
  twitter: 'twitter',
  type: 'type',
  tags: 'tags',
  features: 'features'
};

exports.Prisma.ZoneScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  coordinates: 'coordinates',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  averageDeliveryTime: 'averageDeliveryTime',
  orderVolume: 'orderVolume',
  activeBusinesses: 'activeBusinesses'
};

exports.Prisma.NotificationPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  courierId: 'courierId',
  type: 'type',
  channel: 'channel',
  frequency: 'frequency',
  enabled: 'enabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  type: 'type',
  isRead: 'isRead',
  createdAt: 'createdAt',
  userId: 'userId',
  courierId: 'courierId',
  orderId: 'orderId',
  metadata: 'metadata'
};

exports.Prisma.DeliveryScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  status: 'status',
  courierId: 'courierId',
  customerId: 'customerId',
  zoneId: 'zoneId',
  orderId: 'orderId',
  assignedAt: 'assignedAt',
  pickedUpAt: 'pickedUpAt',
  deliveredAt: 'deliveredAt',
  estimatedPickupTime: 'estimatedPickupTime',
  estimatedDeliveryTime: 'estimatedDeliveryTime',
  duration: 'duration',
  actualDuration: 'actualDuration',
  distance: 'distance',
  actualDistance: 'actualDistance',
  pickupLatitude: 'pickupLatitude',
  pickupLongitude: 'pickupLongitude',
  dropoffLatitude: 'dropoffLatitude',
  dropoffLongitude: 'dropoffLongitude',
  routeId: 'routeId',
  sequenceNumber: 'sequenceNumber',
  priority: 'priority'
};

exports.Prisma.InventoryScalarFieldEnum = {
  id: 'id',
  businessId: 'businessId',
  name: 'name',
  description: 'description',
  quantity: 'quantity',
  price: 'price',
  sku: 'sku',
  imageUrl: 'imageUrl',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  categoryId: 'categoryId'
};

exports.Prisma.DeliveryLogScalarFieldEnum = {
  id: 'id',
  courierId: 'courierId',
  action: 'action',
  timestamp: 'timestamp',
  latitude: 'latitude',
  longitude: 'longitude',
  note: 'note',
  metadata: 'metadata'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  type: 'type',
  format: 'format',
  parameters: 'parameters',
  createdAt: 'createdAt',
  data: 'data',
  url: 'url',
  expiresAt: 'expiresAt'
};

exports.Prisma.ScheduleScalarFieldEnum = {
  id: 'id',
  dayOfWeek: 'dayOfWeek',
  startTime: 'startTime',
  endTime: 'endTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ScheduledReportScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  scheduleId: 'scheduleId',
  reportName: 'reportName',
  type: 'type',
  format: 'format',
  parameters: 'parameters',
  enabled: 'enabled',
  recipients: 'recipients',
  nextRunAt: 'nextRunAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserSettingsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  language: 'language',
  theme: 'theme',
  notifications: 'notifications',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MenuItemScalarFieldEnum = {
  id: 'id',
  businessId: 'businessId',
  name: 'name',
  description: 'description',
  price: 'price',
  imageUrl: 'imageUrl',
  category: 'category',
  tags: 'tags',
  ingredients: 'ingredients',
  calories: 'calories',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CourierAvailabilityScalarFieldEnum = {
  id: 'id',
  courierId: 'courierId',
  status: 'status',
  startTime: 'startTime',
  endTime: 'endTime',
  note: 'note',
  createdAt: 'createdAt'
};

exports.Prisma.DeliveryTimeWindowScalarFieldEnum = {
  id: 'id',
  name: 'name',
  startTime: 'startTime',
  endTime: 'endTime',
  description: 'description',
  priorityFactor: 'priorityFactor'
};

exports.Prisma.DeliveryRouteScalarFieldEnum = {
  id: 'id',
  courierId: 'courierId',
  name: 'name',
  createdAt: 'createdAt',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  status: 'status',
  totalDistance: 'totalDistance',
  totalDuration: 'totalDuration',
  startLatitude: 'startLatitude',
  startLongitude: 'startLongitude',
  endLatitude: 'endLatitude',
  endLongitude: 'endLongitude',
  routePath: 'routePath'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  currency: 'currency',
  method: 'method',
  status: 'status',
  reference: 'reference',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  processedAt: 'processedAt',
  orderId: 'orderId',
  recipientId: 'recipientId',
  businessId: 'businessId'
};

exports.Prisma.ProductCategoryScalarFieldEnum = {
  id: 'id',
  businessId: 'businessId',
  name: 'name',
  description: 'description',
  slug: 'slug',
  imageUrl: 'imageUrl',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  parentId: 'parentId'
};

exports.Prisma.ActivityLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  description: 'description',
  createdAt: 'createdAt',
  userId: 'userId',
  targetId: 'targetId',
  targetType: 'targetType',
  ip: 'ip',
  userAgent: 'userAgent',
  adminId: 'adminId',
  metadata: 'metadata',
  severity: 'severity',
  category: 'category',
  isResolved: 'isResolved',
  resolvedAt: 'resolvedAt',
  resolvedBy: 'resolvedBy'
};

exports.Prisma.SystemActionScalarFieldEnum = {
  id: 'id',
  action: 'action',
  description: 'description',
  createdAt: 'createdAt',
  adminId: 'adminId',
  status: 'status',
  payload: 'payload',
  result: 'result',
  error: 'error',
  executionTime: 'executionTime'
};

exports.Prisma.SystemSettingsScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  category: 'category',
  description: 'description',
  dataType: 'dataType',
  isEncrypted: 'isEncrypted',
  lastUpdated: 'lastUpdated',
  updatedBy: 'updatedBy'
};

exports.Prisma.AdminDashboardWidgetScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  position: 'position',
  size: 'size',
  config: 'config',
  isActive: 'isActive',
  adminId: 'adminId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminPermissionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminRoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminRoleMappingScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  roleId: 'roleId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  subject: 'subject',
  body: 'body',
  category: 'category',
  description: 'description',
  isActive: 'isActive',
  variables: 'variables',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
};

exports.Prisma.SentEmailScalarFieldEnum = {
  id: 'id',
  templateId: 'templateId',
  recipient: 'recipient',
  subject: 'subject',
  variables: 'variables',
  messageId: 'messageId',
  sentBy: 'sentBy',
  sentAt: 'sentAt',
  status: 'status',
  category: 'category',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerAddressScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  title: 'title',
  firstName: 'firstName',
  lastName: 'lastName',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  country: 'country',
  phone: 'phone',
  notes: 'notes',
  latitude: 'latitude',
  longitude: 'longitude',
  isDefault: 'isDefault',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RefundRequestScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  customerId: 'customerId',
  businessId: 'businessId',
  status: 'status',
  reason: 'reason',
  otherReason: 'otherReason',
  requestedItems: 'requestedItems',
  refundAmount: 'refundAmount',
  approvedAmount: 'approvedAmount',
  evidenceUrls: 'evidenceUrls',
  adminNotes: 'adminNotes',
  customerNotes: 'customerNotes',
  businessNotes: 'businessNotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  reviewedAt: 'reviewedAt',
  reviewedBy: 'reviewedBy',
  refundedAt: 'refundedAt'
};

exports.Prisma.CancellationRequestScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  customerId: 'customerId',
  businessId: 'businessId',
  status: 'status',
  reason: 'reason',
  otherReason: 'otherReason',
  cancellationFee: 'cancellationFee',
  autoProcessed: 'autoProcessed',
  customerNotes: 'customerNotes',
  businessNotes: 'businessNotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  reviewedAt: 'reviewedAt',
  reviewedBy: 'reviewedBy',
  cancelledAt: 'cancelledAt'
};

exports.Prisma.RefundPolicyScalarFieldEnum = {
  id: 'id',
  businessId: 'businessId',
  name: 'name',
  description: 'description',
  autoApproveTimeline: 'autoApproveTimeline',
  timeLimit: 'timeLimit',
  orderStatusRules: 'orderStatusRules',
  productRules: 'productRules',
  cancellationFees: 'cancellationFees',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SavedPaymentMethodScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  type: 'type',
  provider: 'provider',
  isDefault: 'isDefault',
  nickName: 'nickName',
  cardBrand: 'cardBrand',
  cardLast4: 'cardLast4',
  cardExpMonth: 'cardExpMonth',
  cardExpYear: 'cardExpYear',
  cardHolderName: 'cardHolderName',
  bankName: 'bankName',
  bankAccountLast4: 'bankAccountLast4',
  externalId: 'externalId',
  isActive: 'isActive',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  currency: 'currency',
  interval: 'interval',
  intervalCount: 'intervalCount',
  trialPeriodDays: 'trialPeriodDays',
  features: 'features',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  businessId: 'businessId'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  planId: 'planId',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  trialEndDate: 'trialEndDate',
  canceledAt: 'canceledAt',
  pausedAt: 'pausedAt',
  resumeAt: 'resumeAt',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  nextBillingDate: 'nextBillingDate',
  savedPaymentMethodId: 'savedPaymentMethodId',
  quantity: 'quantity',
  autoRenew: 'autoRenew',
  cancelAtPeriodEnd: 'cancelAtPeriodEnd',
  metadata: 'metadata',
  externalId: 'externalId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  businessId: 'businessId'
};

exports.Prisma.RecurringPaymentScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  amount: 'amount',
  status: 'status',
  paymentMethod: 'paymentMethod',
  paymentDate: 'paymentDate',
  dueDate: 'dueDate',
  description: 'description',
  externalId: 'externalId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DashboardMetricScalarFieldEnum = {
  id: 'id',
  metrics: 'metrics',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.EmailSettingsScalarFieldEnum = {
  id: 'id',
  settings: 'settings',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.AdminOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  department: 'department',
  permissions: 'permissions',
  title: 'title',
  phone: 'phone',
  profileImage: 'profileImage',
  ipRestrictions: 'ipRestrictions'
};

exports.Prisma.CourierOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  vehicleType: 'vehicleType',
  phone: 'phone',
  zoneId: 'zoneId'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.OrderOrderByRelevanceFieldEnum = {
  id: 'id',
  address: 'address',
  notes: 'notes',
  customerId: 'customerId',
  businessId: 'businessId',
  courierId: 'courierId',
  timeWindowId: 'timeWindowId',
  refundStatus: 'refundStatus',
  cancellationStatus: 'cancellationStatus'
};

exports.Prisma.CustomerOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  phone: 'phone',
  address: 'address'
};

exports.Prisma.BusinessOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  description: 'description',
  address: 'address',
  phone: 'phone',
  website: 'website',
  email: 'email',
  logoUrl: 'logoUrl',
  coverUrl: 'coverUrl',
  zoneId: 'zoneId',
  tax_id: 'tax_id',
  bank_iban: 'bank_iban',
  openingTime: 'openingTime',
  closingTime: 'closingTime',
  facebook: 'facebook',
  instagram: 'instagram',
  twitter: 'twitter',
  type: 'type',
  tags: 'tags',
  features: 'features'
};

exports.Prisma.ZoneOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.NotificationPreferenceOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  courierId: 'courierId'
};

exports.Prisma.NotificationOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  userId: 'userId',
  courierId: 'courierId',
  orderId: 'orderId'
};

exports.Prisma.DeliveryOrderByRelevanceFieldEnum = {
  id: 'id',
  status: 'status',
  courierId: 'courierId',
  customerId: 'customerId',
  zoneId: 'zoneId',
  orderId: 'orderId',
  routeId: 'routeId'
};

exports.Prisma.InventoryOrderByRelevanceFieldEnum = {
  id: 'id',
  businessId: 'businessId',
  name: 'name',
  description: 'description',
  sku: 'sku',
  imageUrl: 'imageUrl',
  categoryId: 'categoryId'
};

exports.Prisma.DeliveryLogOrderByRelevanceFieldEnum = {
  id: 'id',
  courierId: 'courierId',
  action: 'action',
  note: 'note'
};

exports.Prisma.ReportOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  url: 'url'
};

exports.Prisma.ScheduleOrderByRelevanceFieldEnum = {
  id: 'id',
  startTime: 'startTime',
  endTime: 'endTime'
};

exports.Prisma.ScheduledReportOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  scheduleId: 'scheduleId',
  reportName: 'reportName',
  recipients: 'recipients'
};

exports.Prisma.UserSettingsOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  language: 'language',
  theme: 'theme'
};

exports.Prisma.MenuItemOrderByRelevanceFieldEnum = {
  id: 'id',
  businessId: 'businessId',
  name: 'name',
  description: 'description',
  imageUrl: 'imageUrl',
  category: 'category',
  tags: 'tags',
  ingredients: 'ingredients'
};

exports.Prisma.CourierAvailabilityOrderByRelevanceFieldEnum = {
  id: 'id',
  courierId: 'courierId',
  note: 'note'
};

exports.Prisma.DeliveryTimeWindowOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  startTime: 'startTime',
  endTime: 'endTime',
  description: 'description'
};

exports.Prisma.DeliveryRouteOrderByRelevanceFieldEnum = {
  id: 'id',
  courierId: 'courierId',
  name: 'name'
};

exports.Prisma.PaymentOrderByRelevanceFieldEnum = {
  id: 'id',
  currency: 'currency',
  reference: 'reference',
  description: 'description',
  orderId: 'orderId',
  recipientId: 'recipientId',
  businessId: 'businessId'
};

exports.Prisma.ProductCategoryOrderByRelevanceFieldEnum = {
  id: 'id',
  businessId: 'businessId',
  name: 'name',
  description: 'description',
  slug: 'slug',
  imageUrl: 'imageUrl',
  parentId: 'parentId'
};

exports.Prisma.ActivityLogOrderByRelevanceFieldEnum = {
  id: 'id',
  action: 'action',
  description: 'description',
  userId: 'userId',
  targetId: 'targetId',
  targetType: 'targetType',
  ip: 'ip',
  userAgent: 'userAgent',
  adminId: 'adminId',
  severity: 'severity',
  category: 'category',
  resolvedBy: 'resolvedBy'
};

exports.Prisma.SystemActionOrderByRelevanceFieldEnum = {
  id: 'id',
  action: 'action',
  description: 'description',
  adminId: 'adminId',
  status: 'status',
  error: 'error'
};

exports.Prisma.SystemSettingsOrderByRelevanceFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  category: 'category',
  description: 'description',
  dataType: 'dataType',
  updatedBy: 'updatedBy'
};

exports.Prisma.AdminDashboardWidgetOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  size: 'size',
  adminId: 'adminId'
};

exports.Prisma.AdminPermissionOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.AdminRoleOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.AdminRoleMappingOrderByRelevanceFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  roleId: 'roleId'
};

exports.Prisma.EmailTemplateOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  subject: 'subject',
  body: 'body',
  category: 'category',
  description: 'description',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
};

exports.Prisma.SentEmailOrderByRelevanceFieldEnum = {
  id: 'id',
  templateId: 'templateId',
  recipient: 'recipient',
  subject: 'subject',
  variables: 'variables',
  messageId: 'messageId',
  sentBy: 'sentBy',
  status: 'status',
  category: 'category'
};

exports.Prisma.CustomerAddressOrderByRelevanceFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  title: 'title',
  firstName: 'firstName',
  lastName: 'lastName',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  country: 'country',
  phone: 'phone',
  notes: 'notes'
};

exports.Prisma.RefundRequestOrderByRelevanceFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  customerId: 'customerId',
  businessId: 'businessId',
  otherReason: 'otherReason',
  evidenceUrls: 'evidenceUrls',
  adminNotes: 'adminNotes',
  customerNotes: 'customerNotes',
  businessNotes: 'businessNotes',
  reviewedBy: 'reviewedBy'
};

exports.Prisma.CancellationRequestOrderByRelevanceFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  customerId: 'customerId',
  businessId: 'businessId',
  otherReason: 'otherReason',
  customerNotes: 'customerNotes',
  businessNotes: 'businessNotes',
  reviewedBy: 'reviewedBy'
};

exports.Prisma.RefundPolicyOrderByRelevanceFieldEnum = {
  id: 'id',
  businessId: 'businessId',
  name: 'name',
  description: 'description'
};

exports.Prisma.SavedPaymentMethodOrderByRelevanceFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  nickName: 'nickName',
  cardLast4: 'cardLast4',
  cardHolderName: 'cardHolderName',
  bankName: 'bankName',
  bankAccountLast4: 'bankAccountLast4',
  externalId: 'externalId'
};

exports.Prisma.SubscriptionPlanOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  currency: 'currency',
  businessId: 'businessId'
};

exports.Prisma.SubscriptionOrderByRelevanceFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  planId: 'planId',
  savedPaymentMethodId: 'savedPaymentMethodId',
  externalId: 'externalId',
  businessId: 'businessId'
};

exports.Prisma.RecurringPaymentOrderByRelevanceFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  description: 'description',
  externalId: 'externalId'
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  BUSINESS: 'BUSINESS',
  COURIER: 'COURIER',
  CUSTOMER: 'CUSTOMER'
};

exports.Status = exports.$Enums.Status = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  PREPARING: 'PREPARING',
  READY: 'READY',
  IN_TRANSIT: 'IN_TRANSIT',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED',
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED',
  RETURNED: 'RETURNED',
  REFUNDED: 'REFUNDED',
  PARTIALLY_REFUNDED: 'PARTIALLY_REFUNDED',
  ACCEPTED: 'ACCEPTED',
  PICKED_UP: 'PICKED_UP',
  FAILED: 'FAILED'
};

exports.CourierAvailabilityStatus = exports.$Enums.CourierAvailabilityStatus = {
  AVAILABLE: 'AVAILABLE',
  BUSY: 'BUSY',
  OFFLINE: 'OFFLINE',
  ON_BREAK: 'ON_BREAK'
};

exports.DeliveryPriority = exports.$Enums.DeliveryPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  ORDER_PLACED: 'ORDER_PLACED',
  ORDER_ACCEPTED: 'ORDER_ACCEPTED',
  ORDER_READY: 'ORDER_READY',
  ORDER_DELIVERED: 'ORDER_DELIVERED',
  ORDER_CANCELLED: 'ORDER_CANCELLED',
  COURIER_ASSIGNED: 'COURIER_ASSIGNED',
  PAYMENT_PROCESSED: 'PAYMENT_PROCESSED',
  REVIEW_REQUESTED: 'REVIEW_REQUESTED',
  SYSTEM_NOTIFICATION: 'SYSTEM_NOTIFICATION'
};

exports.NotificationChannel = exports.$Enums.NotificationChannel = {
  EMAIL: 'EMAIL',
  PUSH: 'PUSH',
  SMS: 'SMS'
};

exports.NotificationFrequency = exports.$Enums.NotificationFrequency = {
  INSTANT: 'INSTANT',
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY'
};

exports.ReportType = exports.$Enums.ReportType = {
  DAILY_PERFORMANCE: 'DAILY_PERFORMANCE',
  WEEKLY_SUMMARY: 'WEEKLY_SUMMARY',
  MONTHLY_ANALYTICS: 'MONTHLY_ANALYTICS',
  CUSTOM: 'CUSTOM',
  COURIER_PERFORMANCE: 'COURIER_PERFORMANCE',
  BUSINESS_PERFORMANCE: 'BUSINESS_PERFORMANCE'
};

exports.ReportFormat = exports.$Enums.ReportFormat = {
  PDF: 'PDF',
  CSV: 'CSV',
  EXCEL: 'EXCEL',
  HTML: 'HTML'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CREDIT_CARD: 'CREDIT_CARD',
  CASH: 'CASH',
  TRANSFER: 'TRANSFER',
  MOBILE_PAYMENT: 'MOBILE_PAYMENT'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED'
};

exports.RefundRequestStatus = exports.$Enums.RefundRequestStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  PARTIAL_APPROVED: 'PARTIAL_APPROVED',
  REJECTED: 'REJECTED',
  CANCELLED: 'CANCELLED'
};

exports.RefundReason = exports.$Enums.RefundReason = {
  DAMAGED_PRODUCT: 'DAMAGED_PRODUCT',
  WRONG_PRODUCT: 'WRONG_PRODUCT',
  PRODUCT_NOT_AS_DESCRIBED: 'PRODUCT_NOT_AS_DESCRIBED',
  MISSING_ITEMS: 'MISSING_ITEMS',
  LATE_DELIVERY: 'LATE_DELIVERY',
  QUALITY_ISSUES: 'QUALITY_ISSUES',
  OTHER: 'OTHER'
};

exports.CancellationRequestStatus = exports.$Enums.CancellationRequestStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  AUTO_APPROVED: 'AUTO_APPROVED'
};

exports.CancellationReason = exports.$Enums.CancellationReason = {
  CUSTOMER_CHANGED_MIND: 'CUSTOMER_CHANGED_MIND',
  DUPLICATE_ORDER: 'DUPLICATE_ORDER',
  DELIVERY_TOO_LONG: 'DELIVERY_TOO_LONG',
  PRICE_ISSUES: 'PRICE_ISSUES',
  RESTAURANT_CLOSED: 'RESTAURANT_CLOSED',
  OUT_OF_STOCK: 'OUT_OF_STOCK',
  OTHER: 'OTHER'
};

exports.PaymentProvider = exports.$Enums.PaymentProvider = {
  STRIPE: 'STRIPE',
  IYZICO: 'IYZICO',
  PAYPAL: 'PAYPAL',
  MANUAL: 'MANUAL'
};

exports.CardBrand = exports.$Enums.CardBrand = {
  VISA: 'VISA',
  MASTERCARD: 'MASTERCARD',
  AMEX: 'AMEX',
  DISCOVER: 'DISCOVER',
  TROY: 'TROY',
  OTHER: 'OTHER'
};

exports.SubscriptionInterval = exports.$Enums.SubscriptionInterval = {
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY',
  QUARTERLY: 'QUARTERLY',
  YEARLY: 'YEARLY'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  ACTIVE: 'ACTIVE',
  PAST_DUE: 'PAST_DUE',
  CANCELED: 'CANCELED',
  PAUSED: 'PAUSED',
  TRIAL: 'TRIAL',
  EXPIRED: 'EXPIRED',
  PENDING: 'PENDING'
};

exports.Prisma.ModelName = {
  User: 'User',
  Admin: 'Admin',
  Courier: 'Courier',
  Order: 'Order',
  Customer: 'Customer',
  Business: 'Business',
  Zone: 'Zone',
  NotificationPreference: 'NotificationPreference',
  Notification: 'Notification',
  Delivery: 'Delivery',
  Inventory: 'Inventory',
  DeliveryLog: 'DeliveryLog',
  Report: 'Report',
  Schedule: 'Schedule',
  ScheduledReport: 'ScheduledReport',
  UserSettings: 'UserSettings',
  MenuItem: 'MenuItem',
  CourierAvailability: 'CourierAvailability',
  DeliveryTimeWindow: 'DeliveryTimeWindow',
  DeliveryRoute: 'DeliveryRoute',
  Payment: 'Payment',
  ProductCategory: 'ProductCategory',
  ActivityLog: 'ActivityLog',
  SystemAction: 'SystemAction',
  SystemSettings: 'SystemSettings',
  AdminDashboardWidget: 'AdminDashboardWidget',
  AdminPermission: 'AdminPermission',
  AdminRole: 'AdminRole',
  AdminRoleMapping: 'AdminRoleMapping',
  EmailTemplate: 'EmailTemplate',
  SentEmail: 'SentEmail',
  CustomerAddress: 'CustomerAddress',
  RefundRequest: 'RefundRequest',
  CancellationRequest: 'CancellationRequest',
  RefundPolicy: 'RefundPolicy',
  SavedPaymentMethod: 'SavedPaymentMethod',
  SubscriptionPlan: 'SubscriptionPlan',
  Subscription: 'Subscription',
  RecurringPayment: 'RecurringPayment',
  DashboardMetric: 'DashboardMetric',
  EmailSettings: 'EmailSettings'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
