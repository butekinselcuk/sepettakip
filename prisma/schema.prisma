// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres@localhost:5432/sepet"
}

enum NotificationType {
  ORDER_PLACED
  ORDER_ACCEPTED
  ORDER_READY
  ORDER_DELIVERED
  ORDER_CANCELLED
  COURIER_ASSIGNED
  PAYMENT_PROCESSED
  REVIEW_REQUESTED
  SYSTEM_NOTIFICATION
}

enum NotificationChannel {
  EMAIL
  PUSH
  SMS
}

enum NotificationFrequency {
  INSTANT
  DAILY
  WEEKLY
  MONTHLY
}

enum Role {
  ADMIN
  BUSINESS
  COURIER
  CUSTOMER
}

enum Status {
  PENDING
  PROCESSING
  PREPARING
  READY
  IN_TRANSIT
  DELIVERED
  CANCELLED
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ReportType {
  DAILY_PERFORMANCE
  WEEKLY_SUMMARY
  MONTHLY_ANALYTICS
  CUSTOM
  COURIER_PERFORMANCE
  BUSINESS_PERFORMANCE
}

enum ReportFormat {
  PDF
  CSV
  EXCEL
  HTML
}

// Add new enums for route optimization
enum CourierAvailabilityStatus {
  AVAILABLE
  BUSY
  OFFLINE
  ON_BREAK
}

enum DeliveryPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships based on role
  admin    Admin?
  business Business?
  courier  Courier?
  customer Customer?

  notifications          Notification[]
  notificationPreferences NotificationPreference[]
  reports                Report[]
  scheduledReports       ScheduledReport[]
  settings               UserSettings?

  @@map("users")
}

model Admin {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Admin-specific fields
  department String?
  level      Int     @default(1)
}

model Courier {
  id          String    @id @default(uuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  status      Status    @default(ACTIVE)
  vehicleType String?   // CAR, MOTORCYCLE, BICYCLE, etc.
  phone       String?
  zoneId      String?   // Optional: assigned to a delivery zone
  zone        Zone?     @relation(fields: [zoneId], references: [id])
  ratings     Float?    @default(0)
  
  // Current location
  currentLatitude  Float?
  currentLongitude Float?
  lastLocationUpdate DateTime?
  
  // Service hours
  availableFrom DateTime?
  availableTo   DateTime?
  
  // Delivery history
  orders Order[] // Orders they've delivered
  
  // Additional background checks or documents can be added
  documentsVerified Boolean @default(false)
  backgroundChecked Boolean @default(false)

  notifications          Notification[]
  notificationPreferences NotificationPreference[]
  deliveryLogs           DeliveryLog[]
  deliveries             Delivery[]

  // New relations for route optimization
  availability          CourierAvailability[]
  maxDeliveriesPerDay   Int                  @default(15)
  maxDistance           Float?               // Maximum distance (km) to travel for deliveries
  averageSpeed          Float?               // Average speed (km/h) for delivery estimation

  @@map("couriers")
}

model Order {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    Status   @default(PENDING)

  // Order details
  totalPrice        Float
  items             Json     // Array of items with quantities, prices, etc
  address           String
  notes             String?
  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  
  // Location
  latitude  Float?
  longitude Float?

  // Relations to other models
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  
  businessId String
  business   Business @relation(fields: [businessId], references: [id])
  
  courierId  String?
  courier    Courier? @relation(fields: [courierId], references: [id])
  
  // Notifications
  notifications Notification[]

  // New fields for route optimization
  priority          DeliveryPriority @default(MEDIUM)
  requestedTimeWindow DeliveryTimeWindow? @relation(fields: [timeWindowId], references: [id])
  timeWindowId       String?
  estimatedDuration  Int?            // Estimated delivery duration in minutes
  estimatedDistance  Float?          // Estimated distance in kilometers
  sequenceNumber     Int?            // Delivery sequence in route

  @@index([latitude, longitude])
  @@index([sequenceNumber])
  @@index([priority])
}

model Customer {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  phone     String?
  address   String?
  latitude  Float?
  longitude Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  
  // Delivery history
  deliveries Delivery[]
}

model Business {
  id          String  @id @default(uuid())
  userId      String  @unique
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  description String?
  address     String?
  phone       String?
  website     String?
  logoUrl     String?
  latitude    Float?
  longitude   Float?
  zoneId      String?  // Optional: belongs to a delivery zone
  zone        Zone?    @relation(fields: [zoneId], references: [id])
  status      Status   @default(ACTIVE)
  rating      Float?   // İşletme için ortalama değerlendirme puanı

  // Financial information
  tax_id    String?
  bank_iban String?

  // Business specific collections
  inventory Inventory[]
  orders    Order[]
  menuItems MenuItem[] // Menü öğeleri ilişkisi eklendi

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([status])
  @@map("businesses")
}

model Zone {
  id          String     @id @default(uuid())
  name        String
  description String?
  boundaries  Json?      // GeoJSON for zone boundaries
  businesses  Business[]
  couriers    Courier[]

  notifications Notification[]
  deliveries    Delivery[]

  // New fields for route optimization
  centerLatitude  Float?   // Center point of zone for calculations
  centerLongitude Float?
  maxRadius       Float?   // Maximum radius in km
  isActive        Boolean  @default(true)
  averageDeliveryTime Int? // Average delivery time in minutes within this zone
  routes          DeliveryRoute[]

  @@map("zones")
}

model NotificationPreference {
  id        String   @id @default(cuid())
  userId    String?
  courierId String?
  type      NotificationType
  channel   NotificationChannel
  frequency NotificationFrequency
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User?    @relation(fields: [userId], references: [id])
  courier Courier? @relation(fields: [courierId], references: [id])

  @@unique([userId, type, channel])
  @@unique([courierId, type, channel])
  @@map("notification_preferences")
}

model Notification {
  id        String   @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  data      Json?
  read      Boolean  @default(false)
  userId    String?
  courierId String?
  orderId   String?
  zoneId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User?    @relation(fields: [userId], references: [id])
  courier Courier? @relation(fields: [courierId], references: [id])
  order   Order?   @relation(fields: [orderId], references: [id])
  zone    Zone?    @relation(fields: [zoneId], references: [id])

  @@map("notifications")
}

model Delivery {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  courier   Courier  @relation(fields: [courierId], references: [id])
  courierId String
  zone      Zone     @relation(fields: [zoneId], references: [id])
  zoneId    String
  customer  Customer @relation(fields: [customerId], references: [id])
  customerId String
  logs      DeliveryLog[]

  // Status and Metrics
  status    String
  duration  Int?
  actualDuration Int?
  distance  Float?
  actualDistance Float?
  estimatedArrival DateTime?
  actualArrival DateTime?

  // Timestamps
  assignedAt DateTime?
  pickedUpAt DateTime?
  deliveredAt DateTime?
  cancelledAt DateTime?

  // New fields for route optimization
  priority      DeliveryPriority @default(MEDIUM)
  timeWindow    DeliveryTimeWindow? @relation(fields: [timeWindowId], references: [id])
  timeWindowId  String?
  sequenceInRoute Int?            // Position in the delivery route
  routeId       String?           // Optional reference to a route
  route         DeliveryRoute?    @relation(fields: [routeId], references: [id])

  // Indexes
  @@index([courierId])
  @@index([zoneId])
  @@index([customerId])
  @@index([status])
  @@index([createdAt])
  @@index([sequenceInRoute])
  @@index([routeId])
}

model Inventory {
  id          String   @id @default(uuid())
  name        String
  description String?
  category    String?
  price       Float
  imageUrl    String?
  stock       Int      @default(0)
  businessId  String   // Which business owns this inventory
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model DeliveryLog {
  id         String   @id @default(cuid())
  type       String // ASSIGNED, PICKED_UP, DELIVERED, DELAYED, etc.
  message    String
  metadata   Json?
  courierId  String
  courier    Courier  @relation(fields: [courierId], references: [id])
  deliveryId String
  delivery   Delivery @relation(fields: [deliveryId], references: [id])
  createdAt  DateTime @default(now())

  @@index([courierId])
  @@index([deliveryId])
  @@index([type])
  @@index([createdAt])
}

model Report {
  id             String       @id @default(uuid())
  userId         String       // Who created the report
  user           User         @relation(fields: [userId], references: [id])
  type           ReportType
  format         ReportFormat
  name           String
  parameters     Json         // Query parameters used for the report
  status         String       @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  resultUrl      String?      // URL to the generated report file
  createdAt      DateTime     @default(now())
  completedAt    DateTime?    // When the report was completed
  
  // If this is a scheduled report
  isScheduled    Boolean      @default(false)
  scheduleId     String?
  schedule       Schedule?    @relation(fields: [scheduleId], references: [id])
}

model Schedule {
  id            String    @id @default(uuid())
  frequency     String    // DAILY, WEEKLY, MONTHLY
  dayOfWeek     Int?      // 0-6 for weekly reports (0 = Sunday)
  dayOfMonth    Int?      // 1-31 for monthly reports
  time          String    // Time of day in HH:MM format
  timezone      String    @default("Europe/Istanbul")
  isActive      Boolean   @default(true)
  lastRun       DateTime?
  nextRun       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relationship to the reports generated by this schedule
  reports Report[]
}

model ScheduledReport {
  id           String   @id @default(cuid())
  title        String
  type         String
  frequency    String // DAILY, WEEKLY, MONTHLY
  format       String // PDF, CSV, etc.
  nextRunDate  DateTime
  lastRunDate  DateTime?
  isActive     Boolean  @default(true)
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@index([frequency])
  @@index([nextRunDate])
}

model UserSettings {
  id         String   @id @default(uuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  settings   Json     // Store all user settings as a JSON object
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Menü öğesi modeli
model MenuItem {
  id          String    @id @default(uuid())
  businessId  String
  business    Business  @relation(fields: [businessId], references: [id])
  name        String
  description String?
  price       Float
  category    String?
  isAvailable Boolean   @default(true)
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([businessId, name])
  @@map("menu_items")
}

// New model for courier availability
model CourierAvailability {
  id        String   @id @default(uuid())
  courierId String
  courier   Courier  @relation(fields: [courierId], references: [id])
  status    CourierAvailabilityStatus
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  note      String?

  @@index([courierId])
  @@index([status])
  @@index([startTime, endTime])
  @@map("courier_availability")
}

// New model for delivery time windows
model DeliveryTimeWindow {
  id          String    @id @default(uuid())
  name        String    // e.g., "Morning", "Afternoon", "Evening"
  startTime   DateTime  // Time window start
  endTime     DateTime  // Time window end
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  orders      Order[]
  deliveries  Delivery[]

  @@index([startTime, endTime])
  @@map("delivery_time_windows")
}

// New model for delivery routes
model DeliveryRoute {
  id           String    @id @default(uuid())
  name         String?
  zoneId       String?
  zone         Zone?     @relation(fields: [zoneId], references: [id])
  startLatitude Float?
  startLongitude Float?
  endLatitude  Float?
  endLongitude Float?
  totalDistance Float?   // Total route distance in km
  totalDuration Int?     // Total route duration in minutes
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  date         DateTime? // The date this route is planned for
  
  deliveries   Delivery[]
  
  @@index([zoneId])
  @@index([date])
  @@map("delivery_routes")
}