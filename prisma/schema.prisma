generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String
  role          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  admin         Admin?
  business      Business?
  courier       Courier?
  customer      Customer?
  notifications Notification[]
  settings      UserSettings?
}

model Admin {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Courier {
  id                 String                    @id @default(uuid())
  userId             String                    @unique
  phone              String
  latitude           Float?
  longitude          Float?
  isActive           Boolean                   @default(true)
  vehicleType        String?
  status             String                    @default("AVAILABLE")
  availabilityStatus CourierAvailabilityStatus @default(AVAILABLE)
  zoneId             String?
  currentLatitude    Float?
  currentLongitude   Float?
  documentsVerified  Boolean                   @default(false)
  user               User                      @relation(fields: [userId], references: [id])
  zone               Zone?                     @relation(fields: [zoneId], references: [id])
  deliveries         Delivery[]
  payments           Payment[]
  vehicle            Vehicle?
}

model Customer {
  id         String           @id @default(uuid())
  userId     String           @unique
  phone      String
  address    String
  latitude   Float?
  longitude  Float?
  user       User             @relation(fields: [userId], references: [id])
  deliveries Delivery[]
  orders     Order[]
  payments   Payment[]
  addresses  CustomerAddress[]
}

model Business {
  id        String    @id @default(uuid())
  userId    String    @unique
  name      String
  address   String
  phone     String
  latitude  Float?
  longitude Float?
  user      User      @relation(fields: [userId], references: [id])
  orders    Order[]
  payments  Payment[]
  products  Product[]
  zones     Zone[]
}

model UserSettings {
  id                   String   @id @default(uuid())
  userId               String   @unique
  receiveNotifications Boolean  @default(true)
  emailNotifications   Boolean  @default(true)
  pushNotifications    Boolean  @default(true)
  smsNotifications     Boolean  @default(false)
  newOrderAlert        Boolean  @default(true)
  newCustomerAlert     Boolean  @default(true)
  orderStatusAlert     Boolean  @default(true)
  newDeliveryAlert     Boolean  @default(true)
  deliveryStatusAlert  Boolean  @default(true)
  theme                String   @default("light")
  language             String   @default("tr")
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id])
}

model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  title     String
  message   String
  data      String?
  isRead    Boolean          @default(false)
  userId    String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id])
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  isActive    Boolean     @default(true)
  stock       Int         @default(0)
  businessId  String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  business    Business    @relation(fields: [businessId], references: [id])
  orderItems  OrderItem[]
}

model Vehicle {
  id           String   @id @default(uuid())
  type         String
  make         String?
  model        String?
  year         Int?
  licensePlate String?
  color        String?
  courierId    String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  courier      Courier  @relation(fields: [courierId], references: [id])
}

model Payment {
  id          String        @id @default(uuid())
  amount      Float
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  reference   String?
  orderId     String?
  customerId  String?
  courierId   String?
  businessId  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  processedAt DateTime?
  business    Business?     @relation(fields: [businessId], references: [id])
  courier     Courier?      @relation(fields: [courierId], references: [id])
  customer    Customer?     @relation(fields: [customerId], references: [id])
  order       Order?        @relation(fields: [orderId], references: [id])
}

model Zone {
  id          String     @id @default(uuid())
  name        String
  description String?
  boundaries  String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  businessId  String
  couriers    Courier[]
  deliveries  Delivery[]
  orders      Order[]
  business    Business   @relation(fields: [businessId], references: [id])
}

model Order {
  id         String      @id @default(uuid())
  customerId String
  businessId String
  status     String      @default("PENDING")
  items      String
  totalPrice Float
  address    String
  notes      String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  zoneId     String
  delivery   Delivery?
  business   Business    @relation(fields: [businessId], references: [id])
  customer   Customer    @relation(fields: [customerId], references: [id])
  zone       Zone        @relation(fields: [zoneId], references: [id])
  payments   Payment[]
  orderItems OrderItem[]
  adminNote  String?
}

model Delivery {
  id                String    @id @default(uuid())
  orderId           String?   @unique
  courierId         String
  customerId        String
  zoneId            String
  status            String    @default("PENDING")
  estimatedDuration Int?
  actualDuration    Int?
  pickupAddress     String?
  pickupLatitude    Float?
  pickupLongitude   Float?
  dropoffAddress    String?
  dropoffLatitude   Float?
  dropoffLongitude  Float?
  assignedAt        DateTime?
  pickedUpAt        DateTime?
  deliveredAt       DateTime?
  distance          Float?
  actualDistance    Float?
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  courier           Courier   @relation(fields: [courierId], references: [id])
  customer          Customer  @relation(fields: [customerId], references: [id])
  order             Order?    @relation(fields: [orderId], references: [id])
  zone              Zone      @relation(fields: [zoneId], references: [id])
}

model CustomerAddress {
  id           String   @id @default(uuid())
  customerId   String
  title        String
  firstName    String
  lastName     String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String?
  postalCode   String
  country      String   @default("TÃ¼rkiye")
  phone        String?
  notes        String?
  latitude     Float?
  longitude    Float?
  isDefault    Boolean  @default(false)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  customer     Customer @relation(fields: [customerId], references: [id])
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model SystemSettings {
  id                String   @id @default(uuid())
  maintenance       Boolean  @default(false)
  maintenanceMessage String  @default("")
  theme             String   @default("light")
  language          String   @default("tr")
  dateFormat        String   @default("DD.MM.YYYY")
  timeFormat        String   @default("24h")
  lastUpdated       DateTime @default(now())
  updatedBy         String   @default("system")
}

enum NotificationType {
  ORDER_PLACED
  ORDER_ACCEPTED
  ORDER_READY
  ORDER_DELIVERED
  ORDER_CANCELLED
  COURIER_ASSIGNED
  PAYMENT_PROCESSED
  REVIEW_REQUESTED
  SYSTEM_NOTIFICATION
}

enum NotificationChannel {
  EMAIL
  PUSH
  SMS
}

enum NotificationFrequency {
  INSTANT
  DAILY
  WEEKLY
  MONTHLY
}

enum PaymentMethod {
  CREDIT_CARD
  CASH
  TRANSFER
  MOBILE_PAYMENT
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum CourierAvailabilityStatus {
  AVAILABLE
  BUSY
  OFFLINE
  ON_BREAK
}
